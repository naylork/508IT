// <auto-generated />
using System;
using EventPlusLTD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventPlusLTD.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210210203747_PreScaffold")]
    partial class PreScaffold
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("EventPlusLTD.Models.ActType", b =>
                {
                    b.Property<string>("Genre")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Genre");

                    b.ToTable("ActType");
                });

            modelBuilder.Entity("EventPlusLTD.Models.AssetsNeeded", b =>
                {
                    b.Property<int>("AssetsNeededID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("ActualCosts")
                        .IsRequired()
                        .HasColumnType("Money");

                    b.Property<int>("AmountNeeded")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<decimal>("EstimatedCosts")
                        .HasColumnType("Money");

                    b.Property<int>("PerformanceID")
                        .HasColumnType("int");

                    b.HasKey("AssetsNeededID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("PerformanceID");

                    b.ToTable("AssetsNeeded");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerID");

                    b.HasIndex("EventID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Availability")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Equipment_Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("EquipmentID");

                    b.HasIndex("EquipmentTypeID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("EventPlusLTD.Models.EquipmentType", b =>
                {
                    b.Property<int>("EquipmentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EquipmentTypeID");

                    b.ToTable("EquipmentType");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("EventID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("Location_Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationID");

                    b.HasIndex("EventID");

                    b.ToTable("EventLocation");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Organizer", b =>
                {
                    b.Property<int>("OrganizerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrganizerInfoID")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerRoleID")
                        .HasColumnType("int");

                    b.HasKey("OrganizerID");

                    b.HasIndex("OrganizerInfoID");

                    b.HasIndex("OrganizerRoleID");

                    b.ToTable("Organizer");
                });

            modelBuilder.Entity("EventPlusLTD.Models.OrganizerInfo", b =>
                {
                    b.Property<int>("OrganizerInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrganizerInfoID");

                    b.ToTable("OrganizerInformation");
                });

            modelBuilder.Entity("EventPlusLTD.Models.OrganizerRole", b =>
                {
                    b.Property<int>("OrganizerRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("OrganizerRoleID");

                    b.ToTable("OrganizerRole");
                });

            modelBuilder.Entity("EventPlusLTD.Models.OrganizersOccupied", b =>
                {
                    b.Property<int>("OrganizersOccupiedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrganizerID")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeSlotEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSlotStart")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizersOccupiedID");

                    b.HasIndex("OrganizerID");

                    b.HasIndex("PerformanceID");

                    b.ToTable("OrganizersOccupied");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Participants", b =>
                {
                    b.Property<int>("ParticipantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("ActualCosts")
                        .IsRequired()
                        .HasColumnType("Money");

                    b.Property<decimal>("EstimatedCosts")
                        .HasColumnType("Money");

                    b.Property<int>("PerformanceID")
                        .HasColumnType("int");

                    b.Property<int>("PerformersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeSlotEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSlotStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ParticipantID");

                    b.HasIndex("PerformanceID");

                    b.HasIndex("PerformersID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Performance", b =>
                {
                    b.Property<int>("PerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("PerformanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeSlotEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSlotStart")
                        .HasColumnType("datetime2");

                    b.HasKey("PerformanceID");

                    b.HasIndex("EventID");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Performers", b =>
                {
                    b.Property<int>("PerformersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActTypeGenre")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.HasKey("PerformersID");

                    b.HasIndex("ActTypeGenre");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EventPlusLTD.Models.AssetsNeeded", b =>
                {
                    b.HasOne("EventPlusLTD.Models.Equipment", "Equipment")
                        .WithMany("AssetsNeeded")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPlusLTD.Models.Performance", "Performance")
                        .WithMany("AssetsNeeded")
                        .HasForeignKey("PerformanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Customer", b =>
                {
                    b.HasOne("EventPlusLTD.Models.Event", "Event")
                        .WithMany("Customer")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Equipment", b =>
                {
                    b.HasOne("EventPlusLTD.Models.EquipmentType", "EquipmentType")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Location", b =>
                {
                    b.HasOne("EventPlusLTD.Models.Event", "Event")
                        .WithMany("Location")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Organizer", b =>
                {
                    b.HasOne("EventPlusLTD.Models.OrganizerInfo", "OrganizerInfo")
                        .WithMany("Organizer")
                        .HasForeignKey("OrganizerInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPlusLTD.Models.OrganizerRole", "OrganizerRole")
                        .WithMany("Organizer")
                        .HasForeignKey("OrganizerRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizerInfo");

                    b.Navigation("OrganizerRole");
                });

            modelBuilder.Entity("EventPlusLTD.Models.OrganizersOccupied", b =>
                {
                    b.HasOne("EventPlusLTD.Models.Organizer", "Organizer")
                        .WithMany("OrganizersOccupied")
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPlusLTD.Models.Performance", "Performance")
                        .WithMany("OrganizersOccupied")
                        .HasForeignKey("PerformanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Participants", b =>
                {
                    b.HasOne("EventPlusLTD.Models.Performance", "Performance")
                        .WithMany("Participants")
                        .HasForeignKey("PerformanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPlusLTD.Models.Performers", "Performers")
                        .WithMany("Participants")
                        .HasForeignKey("PerformersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");

                    b.Navigation("Performers");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Performance", b =>
                {
                    b.HasOne("EventPlusLTD.Models.Event", "Event")
                        .WithMany("Performance")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Performers", b =>
                {
                    b.HasOne("EventPlusLTD.Models.ActType", "ActType")
                        .WithMany("Performers")
                        .HasForeignKey("ActTypeGenre");

                    b.Navigation("ActType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventPlusLTD.Models.ActType", b =>
                {
                    b.Navigation("Performers");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Equipment", b =>
                {
                    b.Navigation("AssetsNeeded");
                });

            modelBuilder.Entity("EventPlusLTD.Models.EquipmentType", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Event", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Organizer", b =>
                {
                    b.Navigation("OrganizersOccupied");
                });

            modelBuilder.Entity("EventPlusLTD.Models.OrganizerInfo", b =>
                {
                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventPlusLTD.Models.OrganizerRole", b =>
                {
                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Performance", b =>
                {
                    b.Navigation("AssetsNeeded");

                    b.Navigation("OrganizersOccupied");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("EventPlusLTD.Models.Performers", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
